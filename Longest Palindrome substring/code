
class Solution {
    int resultStart; // Stores the starting index of the longest palindrome found
    int resultLength; // Stores the length of the longest palindrome found

    public String longestPalindrome(String s) {
        int strLength = s.length();
        if (strLength < 2){
            return s;
        }
        //This for loop iterates over each character in the string, treating each character as a center for potential palindromes
        for (int start = 0; start < strLength-1; start++){
            expandRange(s, start, start);
            expandRange(s, start, start + 1);
        }
        return s.substring(resultStart, resultStart + resultLength);
        //the function returns the longest palindromic substring by using the substring() method with the indices stored in resultStart and resultLength
    }

    //The expandRange method attempts to expand around the center, begin and end
    private void expandRange(String s, int begin, int end){
        while (begin >= 0 && end < s.length() && 
                s.charAt(begin)==s.charAt(end)){
            begin--;
            end++;
        }
        if (resultLength < end - begin -1){
            resultStart = begin + 1;  // Update the starting index of the longest palindrome found
            resultLength = end - begin -1;  // Update the length of the longest palindrome found
        }
    }
};
